name: Build and Publish SDK

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 0.1.0)'
        required: true
        type: string
      dry_run:
        description: 'Dry run (no actual publish)'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          cd orchael-sdk
          uv sync --dev

      - name: Run tests
        run: |
          cd orchael-sdk
          uv run pytest --cov=orchael_sdk --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./orchael-sdk/coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-${{ env.PYTHON_VERSION }}-

      - name: Install dependencies
        run: |
          cd orchael-sdk
          uv sync

      - name: Build package
        run: |
          cd orchael-sdk
          uv run python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: orchael-sdk/dist/

      - name: Verify package
        run: |
          cd orchael-sdk
          uv pip install dist/*.whl
          uv run orchael-sdk-cli --help
          uv run orchael-sdk-server --help

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event.inputs.dry_run == 'false'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: orchael-sdk/dist/

      - name: Validate version format
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version must be in format X.Y.Z (e.g., 0.1.0)"
            exit 1
          fi
          echo "Version $VERSION is valid"

      - name: Update pyproject.toml version
        if: github.event.inputs.dry_run == 'false'
        run: |
          cd orchael-sdk
          VERSION="${{ github.event.inputs.version }}"
          # Update version in pyproject.toml
          sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml
          echo "Updated pyproject.toml version to $VERSION"

      - name: Commit and push changes
        if: github.event.inputs.dry_run == 'false'
        run: |
          VERSION="${{ github.event.inputs.version }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add orchael-sdk/pyproject.toml
          git commit -m "new release $VERSION"
          git push

      - name: Create and push tag
        if: github.event.inputs.dry_run == 'false'
        run: |
          VERSION="${{ github.event.inputs.version }}"
          TAG_NAME="v$VERSION"
          git tag $TAG_NAME
          git push origin $TAG_NAME
          echo "Created and pushed tag: $TAG_NAME"

      # Disabling for now, install using pip install -e "git+https://github.com/markcallen/orchael-sdk.git#egg=orchael-sdk&subdirectory=orchael-sdk"
      #- name: Publish to PyPI
      #  uses: pypa/gh-action-pypi-publish@release/v1
      #  with:
      #    password: ${{ secrets.PYPI_API_TOKEN }}
      #    packages-dir: orchael-sdk/dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ format('v{0}', github.event.inputs.version) }}
          name: Release ${{ format('v{0}', github.event.inputs.version) }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
